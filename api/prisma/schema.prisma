// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role disponible sur la plateforme
enum Role {
  ADMIN
  USER
}

// Enum pour les types de documents
enum DocumentType {
  TEXT
  PDF
  IMAGE
}

// Enum pour les types de notifications
enum NotificationType {
  INVITATION
  DOCUMENT_UPDATE
  COLLABORATOR_JOIN
  COLLABORATOR_LEAVE
}

// Table User
model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  // Liaison role - utilisateur
  role               Role           @default(USER)
  isTwoFactorEnabled Boolean        @default(false)
  twoFactorSecret    String?
  blockedAt          DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  // Dossiers dont l'utilisateur est propriétaire
  ownedFolders       Folder[]       @relation("FolderOwner") 
  // Dossiers partagés avec l'utilisateur
  sharedFolders      FolderShare[]  @relation("SharedFolders") 
  // Notifications 
  notifications      Notification[]
  sentNotifications  Notification[] @relation("NotificationSender")

  // relations
  permissions         Permission[]
  invitationsSent     Invitation[]   @relation("InvitedBy")
  invitationsReceived Invitation[]   @relation("InvitedTo")
  documentsUpdated    Document[]     @relation("LastEditor")
  documentsCreated    Document[]     @relation("DocumentCreator")
  Collaborator        Collaborator[]
}

// Table Folder
model Folder {
  id         String        @id @default(uuid())
  name       String
  owner      User          @relation("FolderOwner", fields: [ownerId], references: [id])
  ownerId    String
  parent     Folder?       @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId   String?
  children   Folder[]      @relation("FolderHierarchy")
  documents  Document[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  sharedWith FolderShare[]
}

// Table FolderShare
model FolderShare {
  id        String   @id @default(uuid())
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String
  user      User     @relation("SharedFolders", fields: [userId], references: [id])
  userId    String
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([folderId, userId])
}

// Table Document
model Document {
  id            String         @id @default(uuid())
  title         String
  content       String? // pour les documents texte
  filePath      String? // Chemin vers le fichier sur le serveur
  mimeType      String? // extension du fichier
  folder        Folder         @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId      String
  updatedAt     DateTime?      @updatedAt
  updatedBy     User?          @relation("LastEditor", fields: [updatedById], references: [id])
  updatedById   String?
  createdAt     DateTime       @default(now())
  createdBy     User?          @relation("DocumentCreator", fields: [createdById], references: [id])
  createdById   String?
  type          DocumentType   @default(TEXT)
  notifications Notification[]

  // permissions & invitations
  permissions  Permission[]   @relation("DocumentPermissions")
  invitations  Invitation[]
  Collaborator Collaborator[]
}

// Table Collaborator
model Collaborator {
  id         String   @id @default(uuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  active     Boolean
}

// Table Permission
model Permission {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  document   Document @relation("DocumentPermissions", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  canEdit    Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([userId, documentId])
}

// Enum pour le statut de l'invitation
enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Table Invitation
model Invitation {
  id          String           @id @default(uuid())
  document    Document         @relation(fields: [documentId], references: [id])
  documentId  String
  invitedBy   User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById String
  invitedTo   User             @relation("InvitedTo", fields: [invitedToId], references: [id])
  invitedToId String
  status      InvitationStatus @default(PENDING)
  token       String           @unique
  expiresAt   DateTime
  createdAt   DateTime         @default(now())
}

// Table Notification
model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  token     String? // Token d'invitation pour les notifications de type INVITATION

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  sender     User      @relation("NotificationSender", fields: [senderId], references: [id])
  senderId   String

  @@index([userId])
  @@index([documentId])
  @@index([senderId])
}
