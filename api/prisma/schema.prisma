// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  role               Role      @default(USER)
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorSecret    String?
  blockedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // relations
  permissions         Permission[]
  invitationsSent     Invitation[] @relation("InvitedBy")
  invitationsReceived Invitation[] @relation("InvitedTo")
  documentsUpdated    Document[]   @relation("LastEditor")
}

model Folder {
  id        String     @id @default(uuid())
  name      String
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId  String?
  children  Folder[]   @relation("FolderHierarchy")
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Document {
  id          String   @id @default(uuid())
  title       String
  content     String? // pour les docs textuels
  filePath    String? // pour les fichiers binaires
  mimeType    String? // ex. "application/pdf", "image/png"
  folder      Folder?  @relation(fields: [folderId], references: [id])
  folderId    String?
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("LastEditor", fields: [updatedById], references: [id])
  updatedById String?
  createdAt   DateTime @default(now())

  // permissions & invitations
  permissions Permission[]
  invitations Invitation[]
}

model Permission {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  canEdit    Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([userId, documentId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Invitation {
  id          String           @id @default(uuid())
  document    Document         @relation(fields: [documentId], references: [id])
  documentId  String
  invitedBy   User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById String
  invitedTo   User             @relation("InvitedTo", fields: [invitedToId], references: [id])
  invitedToId String
  status      InvitationStatus @default(PENDING)
  token       String           @unique
  expiresAt   DateTime
  createdAt   DateTime         @default(now())
}
